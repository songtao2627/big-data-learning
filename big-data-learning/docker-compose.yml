
services:
  spark-master:
    image: bitnami/spark:3.4
    container_name: spark-master
    hostname: spark-master
    ports:
      - "8080:8080"  # Spark Master Web UI
      - "7077:7077"  # Spark Master Port
      - "6066:6066"  # Spark Master REST API
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
      - SPARK_MASTER_OPTS=-Dspark.deploy.defaultCores=2 -Dspark.deploy.defaultMemory=1g -Dspark.master.rest.enabled=true
      - SPARK_DAEMON_MEMORY=512m
      - SPARK_MASTER_WEBUI_PORT=8080
    volumes:
      - ./data:/opt/bitnami/spark/data
      - ./scripts/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - spark-logs:/opt/bitnami/spark/logs
      - spark-work:/opt/bitnami/spark/work
    networks:
      spark-network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD", "pgrep", "-f", "org.apache.spark.deploy.master.Master"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  spark-worker-1:
    image: bitnami/spark:3.4
    container_name: spark-worker-1
    hostname: spark-worker-1
    ports:
      - "8081:8081"  # Spark Worker Web UI
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_PORT=8881
      - SPARK_WORKER_WEBUI_PORT=8081
      - SPARK_DAEMON_MEMORY=512m
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
      - SPARK_WORKER_OPTS=-Dspark.worker.cleanup.enabled=true -Dspark.worker.cleanup.interval=1800
    volumes:
      - ./data:/opt/bitnami/spark/data
      - ./scripts/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - spark-logs:/opt/bitnami/spark/logs
      - spark-work:/opt/bitnami/spark/work
    depends_on:
      spark-master:
        condition: service_healthy
    networks:
      spark-network:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD", "pgrep", "-f", "org.apache.spark.deploy.worker.Worker"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    restart: unless-stopped

  spark-worker-2:
    image: bitnami/spark:3.4
    container_name: spark-worker-2
    hostname: spark-worker-2
    ports:
      - "8082:8081"  # Spark Worker Web UI
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_PORT=8882
      - SPARK_WORKER_WEBUI_PORT=8081
      - SPARK_DAEMON_MEMORY=512m
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
      - SPARK_WORKER_OPTS=-Dspark.worker.cleanup.enabled=true -Dspark.worker.cleanup.interval=1800
    volumes:
      - ./data:/opt/bitnami/spark/data
      - ./scripts/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - spark-logs:/opt/bitnami/spark/logs
      - spark-work:/opt/bitnami/spark/work
    depends_on:
      spark-master:
        condition: service_healthy
    networks:
      spark-network:
        ipv4_address: 172.20.0.12
    healthcheck:
      test: ["CMD", "pgrep", "-f", "org.apache.spark.deploy.worker.Worker"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    restart: unless-stopped

  # Spark 开发环境容器 - 用于代码开发和任务提交
  spark-dev:
    build:
      context: .
      dockerfile: Dockerfile.spark-dev
    image: spark-dev:latest
    container_name: spark-dev
    hostname: spark-dev
    ports:
      - "8888:8888"  # Jupyter Notebook
      - "4040:4040"  # Spark Application UI
      - "4041:4041"  # Additional Spark Application UI
    environment:
      - SPARK_MODE=client
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
      - PYSPARK_PYTHON=python3
      - PYSPARK_DRIVER_PYTHON=python3
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=spark-learning
    volumes:
      - ./data:/opt/bitnami/spark/data
      - ./notebooks:/opt/bitnami/spark/notebooks
      - ./scripts:/opt/bitnami/spark/scripts
      - ./scripts/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - spark-logs:/opt/bitnami/spark/logs
    working_dir: /opt/bitnami/spark
    depends_on:
      spark-master:
        condition: service_healthy
    networks:
      spark-network:
        ipv4_address: 172.20.0.20
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/lab"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # 可选：添加Kafka用于流处理学习
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      spark-network:
        ipv4_address: 172.20.0.30
    profiles:
      - streaming
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      spark-network:
        ipv4_address: 172.20.0.31
    profiles:
      - streaming
    restart: unless-stopped

  # 可选：添加Elasticsearch用于数据存储和搜索
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch
    hostname: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      spark-network:
        ipv4_address: 172.20.0.40
    profiles:
      - analytics
    restart: unless-stopped

  # 可选：添加Kibana用于数据可视化
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: kibana
    hostname: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      spark-network:
        ipv4_address: 172.20.0.41
    profiles:
      - analytics
    restart: unless-stopped

volumes:
  spark-logs:
    driver: local
  spark-work:
    driver: local
  elasticsearch-data:
    driver: local
  kafka-data:
    driver: local
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local

networks:
  spark-network:
    driver: bridge
    name: spark-learning-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: spark-br0
      com.docker.network.driver.mtu: 1500